0.10.0
======

First changelog.

High-level summary of notable changes:
* python 3.x support
* Refactoring of SelectConnection ioloop
* This major release contains certain non-backward-compatible API changes as
  well as significant performance improvements in the `BlockingConnection`
  adapter.
* Non-backward-compatible changes in `Channel.add_on_return_callback` callback's
  signature.
* The `AsynchoreConnection` adapter was retired

Details:

python 3.x: this release introduces python 3.x support. Tested on Python 3.3
and 3.4.

`AsynchoreConnection`: Retired this legacy adapter to reduce maintenance burden;
the recommended replacement is the `SelectConnection` adapter.

`SelectConnection`: ioloop was refactored for compatibility with other ioloops.

`Channel.add_on_return_callback`: The callback is now passed the individual
parameters channel, method, properties, and body instead of a tuple of those
values for congruence with other similar callbacks.

`BlockingConnection`: This adapter underwent a makeover under the hood and
gained significant performance improvements as well as ehnanced timer
resolution. It is now implemented as a client of the `SelectConnection` adapter.
Below is an overview of the `BlockingConnection` and `BlockingChannel` API
changes:
  * Recursion: the new implementation eliminates callback recursion that
    sometimes blew out the stack in the legacy implementation (e.g.,
    publish -> consumer_callback -> publish -> consumer_callback, etc.). While
    `BlockingConnection.process_data_events` and `BlockingConnection.sleep` may
    still be called from the scope of the blocking adapter's callbacks in order
    to process pending I/O, additional callbacks will be suppressed whenever
    `BlockingConnection.process_data_events` and `BlockingConnection.sleep` are
    nested in any combination; in that case, the callback information will be
    bufferred and dispatched once nesting unwinds and control returns to the
    level-zero dispatcher.
  * `BlockingConnection.connect`: this method was removed in favor of the
    constructor as the only way to establish connections; this reduces
    maintenance burden, while improving reliability of the adapter.
  * `BlockingConnection.process_data_events`: added the optional parameter
    `time_limit`
  * `BlockingConnection.add_backpressure_callback`: not supported
  * `BlockingConnection.set_backpressure_multiplier`: not supported
  * `BlockingChannel.add_on_flow_callback`: not supported
  * `BlockingChannel.flow`: accepts single arg `active` and returns bool; legacy
    inherited asynchronous `Channel.flow` that accepted `callback` and `active`.
  * `BlockingChannel.force_data_events`: removed as it is no longer necessary
    following redesign of the adapter.
  * Removed the `nowait` parameter from `BlockingChannel` methods, forcing
    `nowait=False` (former API default) in the implementation; this is more
    suitable for the blocking nature of the adapter and its error-reporting
    strategy; this concerns the following methods: `basic_cancel`,
    `confirm_delivery`, `exchange_bind`, `exchange_declare`, `exchange_delete`,
    `exchange_unbind`, `queue_bind`, `queue_declare`, `queue_delete`, and
    `queue_purge`.
  * `BlockingChannel.basic_cancel`: returns a sequence instead of None; for a
    `no_ack=True` consumer, `basic_cancel` returns a sequence of pending
    messages that arrived before broker confirmed the cancellation.
  * `BlockingChannel.consume`: added new optional kwargs `arguments` and
    `inactivity_timeout`. Also, raises ValueError if the consumer creation
    parameters don't match those used to create the existing queue consumer
    generator, if any; this happens when you break out of the consume loop, then
    call `BlockingChannel.consume` again with different consumer-creation args
    without first cancelling the previous queue consumer generator via
    `BlockingChannel.cancel`. The legacy implementation would silently resume
    consuming from the existing queue consumer generator even if the subsequent
    `BlockingChannel.consume` was invoked with a different queue name, etc.
  * `BlockingChannel.cancel`: returns 0; the legacy implementation tried to
    return the number of requeued messages, but this number was not accurate
    as it didn't include the messages returned by the Channel class; this count
    is not generally useful, so returning 0 is a reasonable replacement.
  * `BlockingChannel.open`: removed in favor of having a single mechanism for
    creating a channel (`BlockingConnection.channel`); this reduces maintenance
    burden, while improving reliability of the adapter.
  * `BlockingChannel.confirm_delivery`: raises UnroutableError when unroutable
    messages that were sent prior to this call are returned before we receive
    Confirm.Select-ok.
  * `BlockingChannel.basic_publish: always returns True when delivery
    confirmation is not enabled (publisher-acks = off); the legacy implementation
    returned a bool in this case if `mandatory=True` to indicate whether the
    message was delivered; however, this was non-deterministic, because
    Basic.Return is asynchronous and there is no way to know how long to wait
    for it or its absence. The legacy implementation returned None when
    publishing with publisher-acks = off and `mandatory=False`. The new
    implementation always returns True when publishing while
    publisher-acks = off.
  * `BlockingChannel.publish`: a new alternate method (vs. `basic_publish`) for
     publishing a message with more detailed error reporting via UnroutableError
     and NackError exceptions.
  * `BlockingChannel.start_consuming`: raises pika.exceptions.RecursionError if
    called from the scope of a `BlockingConnection` or `BlockingChannel`
    callback.
  * `BlockingChannel.get_waiting_message_count`: new method; returns the number
    of messages that may be retrieved from the current queue consumer generator
    via `BasicChannel.consume` without blocking.
